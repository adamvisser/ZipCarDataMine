

$(document).ready(function () {
	$('.ui.sidebar').sidebar({
		dimPage: false,
		transition: 'scale down',
		mobileTransition: 'uncover'
	}).sidebar('attach events', '.menu .item');
	$('#menu').sticky({
		context: '.pusher'
	});
	//alert('bootstrap attempt....');
});

angular.module('ziptopia.auth', []);
angular.module('ziptopia', ['ziptopia.auth', 'ngRoute', 'ngResource']);
angular.module('ziptopia').config(function ($routeProvider) {
			$routeProvider.when('/', { templateUrl: '/views/home.html', controller: homeController }).when('/login', { templateUrl: '/views/login.html', controller: loginController });
});

//there is so much DI going on here.... need to figure out of this is bad and if it can be cleaned up
function homeController($scope, AuthCheck) {
	AuthCheck.forceAuth();
	//logged in and all is well
	$scope.fullName = AuthCheck.getFullName();
}


//there is so much DI going on here.... need to figure out of this is bad and if it can be cleaned up
function loginController($scope, AuthCheck, AuthResource, $location) {
	//for Auth
	$scope.auth = new AuthResource();
	//no errors yet, just getting started here
	$scope.auth.errors = 0;
	$scope.checkLogin = function () {
		$scope.auth.$save(function (auth) {
			if (auth.errors == 0) {
				//dont need an else, the view will take care of that ;)
				AuthCheck.setAuth(auth.token, auth.username);
				$location.path('/');
			}
		});
	};
}
angular.module('ziptopia.auth').factory('AuthCheck', ['$location', function ($location) {
  //this will be the random hashed algorithm that laravel sends us
  var authToken = '';
  var userID = 0;
  var fullName = '';
  var loggedIn = false;

  return {
    getAuth: function () {
      return authToken;
    },
    isLoggedIn: function () {
      return loggedIn;
    },
    getUserID: function () {
      return userID;
    },
    getFullName: function () {
      return userID;
    },
    setAuth: function (newAuth, newName) {
      authToken = newAuth;
      fullName = newName;
      loggedIn = true;
    },
    forceAuth: function () {
      if (!loggedIn) {
        $location.path('/login');
      }
    }
  };
}]);


angular.module('ziptopia.auth').factory('AuthResource', function ($resource) {
	var AuthResource = $resource('/login', {});
	AuthResource.prototype.isNew = function () {
		return typeof this.id === 'undefined';
	};
	return AuthResource;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInJvdXRlcy5qcyIsImhvbWVDb250cm9sbGVyLmpzIiwibG9naW5Db250cm9sbGVyLmpzIiwiQXV0aENoZWNrLmpzIiwiQXV0aFJlc291cmNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsRUFBRSxRQUFGLEVBQVksS0FBWixDQUFrQixZQUFXO0FBQzFCLEdBQUUsYUFBRixFQUFpQixPQUFqQixDQUF5QjtBQUN4QixXQUFtQixLQUFuQjtBQUNBLGNBQW1CLFlBQW5CO0FBQ0Esb0JBQW1CLFNBQW5CO0VBSEQsRUFJRyxPQUpILENBSVcsZUFKWCxFQUk0QixhQUo1QixFQUQwQjtBQU0xQixHQUFFLE9BQUYsRUFBVyxNQUFYLENBQWtCO0FBQ2pCLFdBQVMsU0FBVDtFQUREOztBQU4wQixDQUFYLENBQWxCOztBQVlBLFFBQVEsTUFBUixDQUFlLGVBQWYsRUFBZ0MsRUFBaEM7QUFDQSxRQUFRLE1BQVIsQ0FBZSxVQUFmLEVBQTJCLENBQUUsZUFBRixFQUFrQixTQUFsQixFQUE0QixZQUE1QixDQUEzQjtBQ2ZBLFFBQVEsTUFBUixDQUFlLFVBQWYsRUFBMkIsTUFBM0IsQ0FBa0MsVUFBVSxjQUFWLEVBQTBCO0FBQ3pELGtCQUNDLElBREQsQ0FDTSxHQUROLEVBQ1csRUFBQyxhQUFhLGtCQUFiLEVBQWlDLFlBQVksY0FBWixFQUQ3QyxFQUVDLElBRkQsQ0FFTSxRQUZOLEVBRWdCLEVBQUMsYUFBYSxtQkFBYixFQUFrQyxZQUFZLGVBQVosRUFGbkQsRUFEeUQ7Q0FBMUIsQ0FBbEM7OztBQ0VBLFNBQVMsY0FBVCxDQUF3QixNQUF4QixFQUFnQyxTQUFoQyxFQUEwQztBQUN6QyxXQUFVLFNBQVY7O0FBRHlDLE9BR3pDLENBQU8sUUFBUCxHQUFrQixVQUFVLFdBQVYsRUFBbEIsQ0FIeUM7Q0FBMUM7Ozs7QUNDQSxTQUFTLGVBQVQsQ0FBeUIsTUFBekIsRUFBaUMsU0FBakMsRUFBNEMsWUFBNUMsRUFBMEQsU0FBMUQsRUFBb0U7O0FBRW5FLFFBQU8sSUFBUCxHQUFjLElBQUksWUFBSixFQUFkOztBQUZtRSxPQUluRSxDQUFPLElBQVAsQ0FBWSxNQUFaLEdBQXFCLENBQXJCLENBSm1FO0FBS25FLFFBQU8sVUFBUCxHQUFvQixZQUFVO0FBQzdCLFNBQU8sSUFBUCxDQUFZLEtBQVosQ0FBa0IsVUFBUyxJQUFULEVBQWM7QUFDL0IsT0FBSSxLQUFLLE1BQUwsSUFBYSxDQUFiLEVBQWdCOztBQUVuQixjQUFVLE9BQVYsQ0FBa0IsS0FBSyxLQUFMLEVBQVksS0FBSyxRQUFMLENBQTlCLENBRm1CO0FBR25CLGNBQVUsSUFBVixDQUFlLEdBQWYsRUFIbUI7SUFBcEI7R0FEaUIsQ0FBbEIsQ0FENkI7RUFBVixDQUwrQztDQUFwRTtBQ0hBLFFBQVEsTUFBUixDQUFlLGVBQWYsRUFBZ0MsT0FBaEMsQ0FBd0MsV0FBeEMsRUFBcUQsQ0FBQyxXQUFELEVBQWMsVUFBUyxTQUFULEVBQW9COztBQUVyRixNQUFJLFlBQVksRUFBWixDQUZpRjtBQUdyRixNQUFJLFNBQVMsQ0FBVCxDQUhpRjtBQUlyRixNQUFJLFdBQVcsRUFBWCxDQUppRjtBQUtyRixNQUFJLFdBQVcsS0FBWCxDQUxpRjs7QUFPckYsU0FBTztBQUNMLGFBQVUsWUFBVTtBQUNsQixhQUFPLFNBQVAsQ0FEa0I7S0FBVjtBQUdWLGdCQUFhLFlBQVU7QUFDckIsYUFBTyxRQUFQLENBRHFCO0tBQVY7QUFHYixlQUFZLFlBQVk7QUFDdEIsYUFBTyxNQUFQLENBRHNCO0tBQVo7QUFHWixpQkFBYyxZQUFZO0FBQ3hCLGFBQU8sTUFBUCxDQUR3QjtLQUFaO0FBR2QsYUFBUyxVQUFTLE9BQVQsRUFBa0IsT0FBbEIsRUFBMEI7QUFDakMsa0JBQVksT0FBWixDQURpQztBQUVqQyxpQkFBVyxPQUFYLENBRmlDO0FBR2pDLGlCQUFXLElBQVgsQ0FIaUM7S0FBMUI7QUFLVCxlQUFXLFlBQVU7QUFDbkIsVUFBSSxDQUFDLFFBQUQsRUFBVztBQUNiLGtCQUFVLElBQVYsQ0FBZSxRQUFmLEVBRGE7T0FBZjtLQURTO0dBbEJiLENBUHFGO0NBQXBCLENBQW5FOzs7QUNHQSxRQUFRLE1BQVIsQ0FBZSxlQUFmLEVBQWdDLE9BQWhDLENBQXdDLGNBQXhDLEVBQXdELFVBQVUsU0FBVixFQUFxQjtBQUMzRSxLQUFJLGVBQWUsVUFBVSxRQUFWLEVBQW9CLEVBQXBCLENBQWYsQ0FEdUU7QUFFM0UsY0FBYSxTQUFiLENBQXVCLEtBQXZCLEdBQStCLFlBQVU7QUFDeEMsU0FBUSxPQUFPLEtBQUssRUFBTCxLQUFhLFdBQXBCLENBRGdDO0VBQVYsQ0FGNEM7QUFLM0UsUUFBTyxZQUFQLENBTDJFO0NBQXJCLENBQXhEIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHRcdCQoJy51aS5zaWRlYmFyJykuc2lkZWJhcih7XG5cdFx0XHRcdGRpbVBhZ2UgICAgICAgICAgOiBmYWxzZSxcblx0XHRcdFx0dHJhbnNpdGlvbiAgICAgICA6ICdzY2FsZSBkb3duJyxcblx0XHRcdFx0bW9iaWxlVHJhbnNpdGlvbiA6ICd1bmNvdmVyJ1xuXHRcdFx0fSkuc2lkZWJhcignYXR0YWNoIGV2ZW50cycsICcubWVudSAuaXRlbScpO1xuXHRcdFx0JCgnI21lbnUnKS5zdGlja3koe1xuXHRcdFx0XHRjb250ZXh0OiAnLnB1c2hlcidcblx0XHRcdH0pO1xuXHRcdFx0Ly9hbGVydCgnYm9vdHN0cmFwIGF0dGVtcHQuLi4uJyk7XG5cdFx0fSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd6aXB0b3BpYS5hdXRoJywgW10pO1xuYW5ndWxhci5tb2R1bGUoJ3ppcHRvcGlhJywgWyAnemlwdG9waWEuYXV0aCcsJ25nUm91dGUnLCduZ1Jlc291cmNlJ10pOyIsImFuZ3VsYXIubW9kdWxlKCd6aXB0b3BpYScpLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcblx0XHRcdCRyb3V0ZVByb3ZpZGVyXG5cdFx0XHQud2hlbignLycsIHt0ZW1wbGF0ZVVybDogJy92aWV3cy9ob21lLmh0bWwnLCBjb250cm9sbGVyOiBob21lQ29udHJvbGxlcn0pXG5cdFx0XHQud2hlbignL2xvZ2luJywge3RlbXBsYXRlVXJsOiAnL3ZpZXdzL2xvZ2luLmh0bWwnLCBjb250cm9sbGVyOiBsb2dpbkNvbnRyb2xsZXJ9KTtcblx0XHR9KTsiLCJcbi8vdGhlcmUgaXMgc28gbXVjaCBESSBnb2luZyBvbiBoZXJlLi4uLiBuZWVkIHRvIGZpZ3VyZSBvdXQgb2YgdGhpcyBpcyBiYWQgYW5kIGlmIGl0IGNhbiBiZSBjbGVhbmVkIHVwXG5mdW5jdGlvbiBob21lQ29udHJvbGxlcigkc2NvcGUsIEF1dGhDaGVjayl7XG5cdEF1dGhDaGVjay5mb3JjZUF1dGgoKTtcblx0Ly9sb2dnZWQgaW4gYW5kIGFsbCBpcyB3ZWxsXG5cdCRzY29wZS5mdWxsTmFtZSA9IEF1dGhDaGVjay5nZXRGdWxsTmFtZSgpO1xufVxuXG4iLCJcblxuLy90aGVyZSBpcyBzbyBtdWNoIERJIGdvaW5nIG9uIGhlcmUuLi4uIG5lZWQgdG8gZmlndXJlIG91dCBvZiB0aGlzIGlzIGJhZCBhbmQgaWYgaXQgY2FuIGJlIGNsZWFuZWQgdXBcbmZ1bmN0aW9uIGxvZ2luQ29udHJvbGxlcigkc2NvcGUsIEF1dGhDaGVjaywgQXV0aFJlc291cmNlLCAkbG9jYXRpb24pe1xuXHQvL2ZvciBBdXRoXG5cdCRzY29wZS5hdXRoID0gbmV3IEF1dGhSZXNvdXJjZSgpO1xuXHQvL25vIGVycm9ycyB5ZXQsIGp1c3QgZ2V0dGluZyBzdGFydGVkIGhlcmVcblx0JHNjb3BlLmF1dGguZXJyb3JzID0gMDtcblx0JHNjb3BlLmNoZWNrTG9naW4gPSBmdW5jdGlvbigpe1xuXHRcdCRzY29wZS5hdXRoLiRzYXZlKGZ1bmN0aW9uKGF1dGgpe1xuXHRcdFx0aWYgKGF1dGguZXJyb3JzPT0wKSB7XG5cdFx0XHRcdC8vZG9udCBuZWVkIGFuIGVsc2UsIHRoZSB2aWV3IHdpbGwgdGFrZSBjYXJlIG9mIHRoYXQgOylcblx0XHRcdFx0QXV0aENoZWNrLnNldEF1dGgoYXV0aC50b2tlbiwgYXV0aC51c2VybmFtZSk7XG5cdFx0XHRcdCRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cbiIsImFuZ3VsYXIubW9kdWxlKCd6aXB0b3BpYS5hdXRoJykuZmFjdG9yeSgnQXV0aENoZWNrJywgWyckbG9jYXRpb24nLCBmdW5jdGlvbigkbG9jYXRpb24pIHtcbiAgLy90aGlzIHdpbGwgYmUgdGhlIHJhbmRvbSBoYXNoZWQgYWxnb3JpdGhtIHRoYXQgbGFyYXZlbCBzZW5kcyB1c1xuICB2YXIgYXV0aFRva2VuID0gJyc7XG4gIHZhciB1c2VySUQgPSAwO1xuICB2YXIgZnVsbE5hbWUgPSAnJztcbiAgdmFyIGxvZ2dlZEluID0gZmFsc2U7XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRBdXRoIDogZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiBhdXRoVG9rZW47XG4gICAgfSxcbiAgICBpc0xvZ2dlZEluIDogZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiBsb2dnZWRJbjtcbiAgICB9LFxuICAgIGdldFVzZXJJRCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB1c2VySUQ7XG4gICAgfSxcbiAgICBnZXRGdWxsTmFtZSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB1c2VySUQ7XG4gICAgfSxcbiAgICBzZXRBdXRoOiBmdW5jdGlvbihuZXdBdXRoLCBuZXdOYW1lKXtcbiAgICAgIGF1dGhUb2tlbiA9IG5ld0F1dGg7XG4gICAgICBmdWxsTmFtZSA9IG5ld05hbWU7XG4gICAgICBsb2dnZWRJbiA9IHRydWU7XG4gICAgfSxcbiAgICBmb3JjZUF1dGg6IGZ1bmN0aW9uKCl7XG4gICAgICBpZiAoIWxvZ2dlZEluKSB7XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1dKTsiLCJcblxuXG5hbmd1bGFyLm1vZHVsZSgnemlwdG9waWEuYXV0aCcpLmZhY3RvcnkoJ0F1dGhSZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcblx0XHR2YXIgQXV0aFJlc291cmNlID0gJHJlc291cmNlKCcvbG9naW4nLCB7fSk7XG5cdFx0QXV0aFJlc291cmNlLnByb3RvdHlwZS5pc05ldyA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRyZXR1cm4gKHR5cGVvZih0aGlzLmlkKSA9PT0gJ3VuZGVmaW5lZCcpO1xuXHRcdH1cblx0XHRyZXR1cm4gQXV0aFJlc291cmNlO1xuXHR9KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
