

$(document).ready(function () {
	$('.ui.sidebar').sidebar({
		dimPage: false,
		transition: 'scale down',
		mobileTransition: 'uncover'
	}).sidebar('attach events', '#MenuButton');
	$('#menu').sticky({
		context: '.pusher'
	});
	//alert('bootstrap attempt....');
});

angular.module('ziptopia.auth', ['ngResource', 'ngCookies']);
angular.module('ziptopia', ['ziptopia.auth', 'ngRoute']);
angular.module('ziptopia').config(function ($routeProvider) {
			$routeProvider.when('/', { templateUrl: '/views/home.html', controller: homeController }).when('/login', { templateUrl: '/views/login.html', controller: loginController });
});

//there is so much DI going on here.... need to figure out of this is bad and if it can be cleaned up
function homeController($scope, AuthCheck) {
	AuthCheck.forceAuth();
	//logged in and all is well
	$scope.fullName = AuthCheck.getFullName();
}


//there is so much DI going on here.... need to figure out of this is bad and if it can be cleaned up
function loginController($scope, AuthCheck, AuthResource, $location) {
	//for Auth
	$scope.auth = new AuthResource();
	//no errors yet, just getting started here
	$scope.auth.errors = false;
	$scope.checkLogin = function () {
		var invalid = false;
		if (typeof $scope.auth.password == 'undefined') {
			invalid = true;
		};
		if (typeof $scope.auth.username == 'undefined') {
			invalid = true;
		};
		if (invalid) {
			$scope.auth.errors = true;
		} else {
			$scope.auth.$save(function (auth) {
				console.log(auth);
				if (auth.errors == false) {
					//dont need an else, the view will take care of that ;)
					AuthCheck.setAuth(auth.token, auth.userid, auth.fullname, auth.username, auth.email);
					$location.path('/');
				}
			});
		}
	};
}
angular.module('ziptopia.auth').factory('AuthCheck', ['$location', '$cookies', function ($location, $cookies) {
  //todo this proper like we will want to set some timer that auto clears auth when the session from the server actually expires, but I still have to setup events and that could take a bit of time, may be out of scope, not sure yet.
  var loggedIn = true;
  if (typeof $cookies.get('loggedIn') === 'undefined') {
    loggedIn = false;
  };
  if (typeof $cookies.get('loggedIn') !== 'boolean') {
    loggedIn = false;
  };
  if (!loggedIn) {
    $cookies.put('loggedIn', false);
    $location.path('/login');
  }
  return {
    getAuth: function () {
      return $cookies.get('authToken');
    },
    loggedIn: loggedIn,
    getUserID: function () {
      return $cookies.get('userID');
    },
    getFullName: function () {
      return $cookies.get('fullName');
    },
    setAuth: function (newAuthToken, newUserID, newFullName, newUserName, newEmail) {
      $cookies.put('authToken', newAuthToken);
      $cookies.put('userID', newUserID);
      $cookies.put('fullName', newFullName);
      $cookies.put('userName', newUserName);
      $cookies.put('email', newEmail);
      $cookies.put('loggedIn', true);
    },
    clearAuth: function () {
      $cookies.put('authToken', '');
      $cookies.put('userID', 0);
      $cookies.put('fullName', '');
      $cookies.put('userName', '');
      $cookies.put('email', '');
      $cookies.put('loggedIn', false);
      $location.path('/login');
    },
    forceAuth: function () {
      if (!loggedIn) {
        $location.path('/login');
      }
    }
  };
}]);


angular.module('ziptopia.auth').factory('AuthResource', function ($resource) {
	var AuthResource = $resource('/login', {});
	AuthResource.prototype.isNew = function () {
		return typeof this.id === 'undefined';
	};
	return AuthResource;
});


angular.module('ziptopia.auth').controller('LogoutButton', ['$scope', 'AuthCheck', function ($scope, AuthCheck) {
	$scope.loggedIn = AuthCheck.loggedIn;
	$scope.logout = function () {
		AuthCheck.clearAuth();
	};
}]);
//# sourceMappingURL=data:application/json;base64,
