

$(document).ready(function () {
	$('.ui.sidebar').sidebar({
		dimPage: false,
		transition: 'scale down',
		mobileTransition: 'uncover'
	}).sidebar('attach events', '.menu .item');
	$('#menu').sticky({
		context: '.pusher'
	});
	//alert('bootstrap attempt....');
});

angular.module('ziptopia.auth', []);
angular.module('ziptopia', ['ziptopia.auth', 'ngRoute', 'ngResource', 'ngCookies']);
angular.module('ziptopia').config(function ($routeProvider) {
			$routeProvider.when('/', { templateUrl: '/views/home.html', controller: homeController }).when('/login', { templateUrl: '/views/login.html', controller: loginController });
});

//there is so much DI going on here.... need to figure out of this is bad and if it can be cleaned up
function homeController($scope, AuthCheck) {
	AuthCheck.forceAuth();
	//logged in and all is well
	$scope.fullName = AuthCheck.getFullName();
}


//there is so much DI going on here.... need to figure out of this is bad and if it can be cleaned up
function loginController($scope, AuthCheck, AuthResource, $location) {
	//for Auth
	$scope.auth = new AuthResource();
	//no errors yet, just getting started here
	$scope.auth.errors = false;
	$scope.checkLogin = function () {
		var invalid = false;
		if (typeof $scope.auth.password == 'undefined') {
			invalid = true;
		};
		if (typeof $scope.auth.username == 'undefined') {
			invalid = true;
		};
		if (invalid) {
			$scope.auth.errors = true;
		} else {
			$scope.auth.$save(function (auth) {
				console.log(auth);
				if (auth.errors == false) {
					//dont need an else, the view will take care of that ;)
					AuthCheck.setAuth(auth.token, auth.userid, auth.fullname, auth.username, auth.email);
					$location.path('/');
				}
			});
		}
	};
}
angular.module('ziptopia.auth').factory('AuthCheck', ['$location', '$cookies', function ($location, $cookies) {

  return {
    getAuth: function () {
      return $cookies.get('authToken');
    },
    isLoggedIn: function () {
      return $cookies.get('loggedIn');
    },
    getUserID: function () {
      return $cookies.get('userID');
    },
    getFullName: function () {
      return $cookies.get('fullName');
    },
    setAuth: function (newAuthToken, newUserID, newFullName, newUserName, newEmail) {
      $cookies.put('authToken', newAuthToken);
      $cookies.put('userID', newUserID);
      $cookies.put('fullName', newFullName);
      $cookies.put('userName', newUserName);
      $cookies.put('email', newEmail);
      $cookies.put('loggedIn', true);
    },
    forceAuth: function () {
      var loggedIn = $cookies.get('loggedIn');
      if (!loggedIn) {
        $location.path('/login');
      }
    }
  };
}]);


angular.module('ziptopia.auth').factory('AuthResource', function ($resource) {
	var AuthResource = $resource('/login', {});
	AuthResource.prototype.isNew = function () {
		return typeof this.id === 'undefined';
	};
	return AuthResource;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInJvdXRlcy5qcyIsImhvbWVDb250cm9sbGVyLmpzIiwibG9naW5Db250cm9sbGVyLmpzIiwiQXV0aENoZWNrLmpzIiwiQXV0aFJlc291cmNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsRUFBRSxRQUFGLEVBQVksS0FBWixDQUFrQixZQUFXO0FBQzFCLEdBQUUsYUFBRixFQUFpQixPQUFqQixDQUF5QjtBQUN4QixXQUFtQixLQUFuQjtBQUNBLGNBQW1CLFlBQW5CO0FBQ0Esb0JBQW1CLFNBQW5CO0VBSEQsRUFJRyxPQUpILENBSVcsZUFKWCxFQUk0QixhQUo1QixFQUQwQjtBQU0xQixHQUFFLE9BQUYsRUFBVyxNQUFYLENBQWtCO0FBQ2pCLFdBQVMsU0FBVDtFQUREOztBQU4wQixDQUFYLENBQWxCOztBQVlBLFFBQVEsTUFBUixDQUFlLGVBQWYsRUFBZ0MsRUFBaEM7QUFDQSxRQUFRLE1BQVIsQ0FBZSxVQUFmLEVBQTJCLENBQUUsZUFBRixFQUFrQixTQUFsQixFQUE0QixZQUE1QixFQUEwQyxXQUExQyxDQUEzQjtBQ2ZBLFFBQVEsTUFBUixDQUFlLFVBQWYsRUFBMkIsTUFBM0IsQ0FBa0MsVUFBVSxjQUFWLEVBQTBCO0FBQ3pELGtCQUNDLElBREQsQ0FDTSxHQUROLEVBQ1csRUFBQyxhQUFhLGtCQUFiLEVBQWlDLFlBQVksY0FBWixFQUQ3QyxFQUVDLElBRkQsQ0FFTSxRQUZOLEVBRWdCLEVBQUMsYUFBYSxtQkFBYixFQUFrQyxZQUFZLGVBQVosRUFGbkQsRUFEeUQ7Q0FBMUIsQ0FBbEM7OztBQ0VBLFNBQVMsY0FBVCxDQUF3QixNQUF4QixFQUFnQyxTQUFoQyxFQUEwQztBQUN6QyxXQUFVLFNBQVY7O0FBRHlDLE9BR3pDLENBQU8sUUFBUCxHQUFrQixVQUFVLFdBQVYsRUFBbEIsQ0FIeUM7Q0FBMUM7Ozs7QUNDQSxTQUFTLGVBQVQsQ0FBeUIsTUFBekIsRUFBaUMsU0FBakMsRUFBNEMsWUFBNUMsRUFBMEQsU0FBMUQs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Q0FBeEQiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdFx0JCgnLnVpLnNpZGViYXInKS5zaWRlYmFyKHtcblx0XHRcdFx0ZGltUGFnZSAgICAgICAgICA6IGZhbHNlLFxuXHRcdFx0XHR0cmFuc2l0aW9uICAgICAgIDogJ3NjYWxlIGRvd24nLFxuXHRcdFx0XHRtb2JpbGVUcmFuc2l0aW9uIDogJ3VuY292ZXInXG5cdFx0XHR9KS5zaWRlYmFyKCdhdHRhY2ggZXZlbnRzJywgJy5tZW51IC5pdGVtJyk7XG5cdFx0XHQkKCcjbWVudScpLnN0aWNreSh7XG5cdFx0XHRcdGNvbnRleHQ6ICcucHVzaGVyJ1xuXHRcdFx0fSk7XG5cdFx0XHQvL2FsZXJ0KCdib290c3RyYXAgYXR0ZW1wdC4uLi4nKTtcblx0XHR9KTtcblxuYW5ndWxhci5tb2R1bGUoJ3ppcHRvcGlhLmF1dGgnLCBbXSk7XG5hbmd1bGFyLm1vZHVsZSgnemlwdG9waWEnLCBbICd6aXB0b3BpYS5hdXRoJywnbmdSb3V0ZScsJ25nUmVzb3VyY2UnLCAnbmdDb29raWVzJ10pOyIsImFuZ3VsYXIubW9kdWxlKCd6aXB0b3BpYScpLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcblx0XHRcdCRyb3V0ZVByb3ZpZGVyXG5cdFx0XHQud2hlbignLycsIHt0ZW1wbGF0ZVVybDogJy92aWV3cy9ob21lLmh0bWwnLCBjb250cm9sbGVyOiBob21lQ29udHJvbGxlcn0pXG5cdFx0XHQud2hlbignL2xvZ2luJywge3RlbXBsYXRlVXJsOiAnL3ZpZXdzL2xvZ2luLmh0bWwnLCBjb250cm9sbGVyOiBsb2dpbkNvbnRyb2xsZXJ9KTtcblx0XHR9KTsiLCJcbi8vdGhlcmUgaXMgc28gbXVjaCBESSBnb2luZyBvbiBoZXJlLi4uLiBuZWVkIHRvIGZpZ3VyZSBvdXQgb2YgdGhpcyBpcyBiYWQgYW5kIGlmIGl0IGNhbiBiZSBjbGVhbmVkIHVwXG5mdW5jdGlvbiBob21lQ29udHJvbGxlcigkc2NvcGUsIEF1dGhDaGVjayl7XG5cdEF1dGhDaGVjay5mb3JjZUF1dGgoKTtcblx0Ly9sb2dnZWQgaW4gYW5kIGFsbCBpcyB3ZWxsXG5cdCRzY29wZS5mdWxsTmFtZSA9IEF1dGhDaGVjay5nZXRGdWxsTmFtZSgpO1xufVxuXG4iLCJcblxuLy90aGVyZSBpcyBzbyBtdWNoIERJIGdvaW5nIG9uIGhlcmUuLi4uIG5lZWQgdG8gZmlndXJlIG91dCBvZiB0aGlzIGlzIGJhZCBhbmQgaWYgaXQgY2FuIGJlIGNsZWFuZWQgdXBcbmZ1bmN0aW9uIGxvZ2luQ29udHJvbGxlcigkc2NvcGUsIEF1dGhDaGVjaywgQXV0aFJlc291cmNlLCAkbG9jYXRpb24pe1xuXHQvL2ZvciBBdXRoXG5cdCRzY29wZS5hdXRoID0gbmV3IEF1dGhSZXNvdXJjZSgpO1xuXHQvL25vIGVycm9ycyB5ZXQsIGp1c3QgZ2V0dGluZyBzdGFydGVkIGhlcmVcblx0JHNjb3BlLmF1dGguZXJyb3JzID0gZmFsc2U7XG5cdCRzY29wZS5jaGVja0xvZ2luID0gZnVuY3Rpb24oKXtcblx0XHR2YXIgaW52YWxpZCA9IGZhbHNlO1xuICAgICAgICBpZiAodHlwZW9mICRzY29wZS5hdXRoLnBhc3N3b3JkID09ICd1bmRlZmluZWQnKSB7aW52YWxpZD10cnVlO307XG4gICAgICAgIGlmICh0eXBlb2YgJHNjb3BlLmF1dGgudXNlcm5hbWUgPT0gJ3VuZGVmaW5lZCcpIHtpbnZhbGlkPXRydWU7fTtcbiAgICAgICAgaWYgKGludmFsaWQpIHtcbiAgICAgICAgXHQkc2NvcGUuYXV0aC5lcnJvcnMgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICBcdCRzY29wZS5hdXRoLiRzYXZlKGZ1bmN0aW9uKGF1dGgpe1xuICAgICAgICBcdFx0Y29uc29sZS5sb2coYXV0aCk7XG5cdFx0XHRcdGlmIChhdXRoLmVycm9ycz09ZmFsc2UpIHtcblx0XHRcdFx0XHQvL2RvbnQgbmVlZCBhbiBlbHNlLCB0aGUgdmlldyB3aWxsIHRha2UgY2FyZSBvZiB0aGF0IDspXG5cdFx0XHRcdFx0QXV0aENoZWNrLnNldEF1dGgoYXV0aC50b2tlbiwgYXV0aC51c2VyaWQsIGF1dGguZnVsbG5hbWUsIGF1dGgudXNlcm5hbWUsIGF1dGguZW1haWwpO1xuXHRcdFx0XHRcdCRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuICAgICAgICB9XG5cdFx0XG5cdH1cbn1cbiIsImFuZ3VsYXIubW9kdWxlKCd6aXB0b3BpYS5hdXRoJykuZmFjdG9yeSgnQXV0aENoZWNrJywgWyckbG9jYXRpb24nLCAnJGNvb2tpZXMnLCBmdW5jdGlvbigkbG9jYXRpb24sICRjb29raWVzKSB7XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRBdXRoIDogZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiAkY29va2llcy5nZXQoJ2F1dGhUb2tlbicpO1xuICAgIH0sXG4gICAgaXNMb2dnZWRJbiA6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gJGNvb2tpZXMuZ2V0KCdsb2dnZWRJbicpO1xuICAgIH0sXG4gICAgZ2V0VXNlcklEIDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICRjb29raWVzLmdldCgndXNlcklEJyk7XG4gICAgfSxcbiAgICBnZXRGdWxsTmFtZSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAkY29va2llcy5nZXQoJ2Z1bGxOYW1lJyk7XG4gICAgfSxcbiAgICBzZXRBdXRoOiBmdW5jdGlvbihuZXdBdXRoVG9rZW4sIG5ld1VzZXJJRCwgbmV3RnVsbE5hbWUsIG5ld1VzZXJOYW1lLCBuZXdFbWFpbCl7XG4gICAgICAkY29va2llcy5wdXQoJ2F1dGhUb2tlbicsIG5ld0F1dGhUb2tlbik7XG4gICAgICAkY29va2llcy5wdXQoJ3VzZXJJRCcsIG5ld1VzZXJJRCk7XG4gICAgICAkY29va2llcy5wdXQoJ2Z1bGxOYW1lJywgbmV3RnVsbE5hbWUpO1xuICAgICAgJGNvb2tpZXMucHV0KCd1c2VyTmFtZScsIG5ld1VzZXJOYW1lKTtcbiAgICAgICRjb29raWVzLnB1dCgnZW1haWwnLCBuZXdFbWFpbCk7XG4gICAgICAkY29va2llcy5wdXQoJ2xvZ2dlZEluJywgdHJ1ZSk7XG4gICAgfSxcbiAgICBmb3JjZUF1dGg6IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgbG9nZ2VkSW4gPSAkY29va2llcy5nZXQoJ2xvZ2dlZEluJyk7XG4gICAgICBpZiAoIWxvZ2dlZEluKSB7XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1dKTsiLCJcblxuXG5hbmd1bGFyLm1vZHVsZSgnemlwdG9waWEuYXV0aCcpLmZhY3RvcnkoJ0F1dGhSZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcblx0XHR2YXIgQXV0aFJlc291cmNlID0gJHJlc291cmNlKCcvbG9naW4nLCB7fSk7XG5cdFx0QXV0aFJlc291cmNlLnByb3RvdHlwZS5pc05ldyA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRyZXR1cm4gKHR5cGVvZih0aGlzLmlkKSA9PT0gJ3VuZGVmaW5lZCcpO1xuXHRcdH1cblx0XHRyZXR1cm4gQXV0aFJlc291cmNlO1xuXHR9KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
